# vim:set et sw=2 ts=8 ft=zsh:

local tokens cmd prefix trigger tail matches lbuf d_cmds fallback
setopt localoptions noshwordsplit noksh_arrays noposixbuiltins
autoload -Uz _fzf_path_completion _fzf_dir_completion
for func in $(echo ${^fpath}/_fzf_complete*(N)); do
  autoload -Uz $(basename "$func")
done

# http://zsh.sourceforge.net/FAQ/zshfaq03.html
# http://zsh.sourceforge.net/Doc/Release/Expansion.html#Parameter-Expansion-Flags
fallback="expand-or-complete"
tokens=(${(z)LBUFFER})
if [ ${#tokens} -lt 1 ]; then
  zle $fallback
  return
fi

cmd=${tokens[1]}

# Explicitly allow for empty trigger.
trigger=${FZF_COMPLETION_TRIGGER-'**'}
[ -z "$trigger" -a ${LBUFFER[-1]} = ' ' ] && tokens+=("")

tail=${LBUFFER:$(( ${#LBUFFER} - ${#trigger} ))}
if [ ${#tokens} -gt 1 -a "$tail" = "$trigger" ]; then
  d_cmds=(${=FZF_COMPLETION_DIR_COMMANDS:-cd pushd rmdir})

  [ -z "$trigger"      ] && prefix=${tokens[-1]} || prefix=${tokens[-1]:0:-${#trigger}}
  [ -z "${tokens[-1]}" ] && lbuf=$LBUFFER        || lbuf=${LBUFFER:0:-${#tokens[-1]}}

  if eval "type _fzf_complete_${cmd} > /dev/null"; then
    eval "prefix=\"$prefix\" _fzf_complete_${cmd} \"$lbuf\""
  elif [ ${d_cmds[(i)$cmd]} -le ${#d_cmds} ]; then
    _fzf_dir_completion "$prefix" "$lbuf"
  else
    _fzf_path_completion "$prefix" "$lbuf"
  fi
# Fall back to default completion
else
  zle $fallback
fi
